var searchIndex={};
searchIndex["rubble"] = {"doc":"An experimental BLE stack.","i":[[4,"Error","rubble","Errors returned by the BLE stack.",null,null],[13,"InvalidLength","","Packet specified an invalid length value or was too short.",0,null],[13,"InvalidValue","","Invalid value supplied for field.",0,null],[13,"Eof","","Unexpectedly reached EOF while reading or writing data.",0,null],[13,"IncompleteParse","","Parsing didn't consume the entire buffer.",0,null],[0,"att","","Implementation of the Attribute Protocol (ATT).",null,null],[3,"Handle","rubble::att","A 16-bit handle uniquely identifying an attribute on an…",null,null],[3,"HandleRange","","A (de)serializable handle range that has been checked for…",null,null],[3,"AttributeServer","","An Attribute Protocol server providing read and write…",null,null],[3,"AttributeServerTx","","An ATT server handle that can send packets and initiate…",null,null],[3,"Attribute","","An ATT server attribute",null,null],[12,"att_type","","The type of the attribute as a UUID16, EG \"Primary…",1,null],[12,"handle","","Unique server-side identifer for attribute",1,null],[12,"value","","Attribute values can be any fixed length or variable…",1,null],[3,"NoAttributes","","An empty attribute set.",null,null],[4,"AttUuid","","ATT protocol UUID (either a 16 or a 128-bit UUID).",null,null],[13,"Uuid16","","",2,null],[13,"Uuid128","","",2,null],[18,"NULL","","The `0x0000` handle is not used for actual attributes, but…",3,null],[11,"as_u16","","Returns the raw 16-bit integer representing this handle.",3,[[["self"]],["u16"]]],[11,"from_raw","","Create an attribute handle from a raw u16",3,[[["u16"]],["self"]]],[11,"new","","",4,[[["handle"]],["self"]]],[11,"contains","","Checks if an Handle is in a HandleRange",4,[[["self"],["handle"]],["bool"]]],[11,"start","","Returns the lowest attribute handle value included in the…",4,[[["self"]],["handle"]]],[11,"end","","Returns the last (highest) attribute handle value included…",4,[[["self"]],["handle"]]],[11,"new","","Creates an `AttributeServer` hosting attributes from an…",5,[[["a"]],["self"]]],[11,"with_sender","","Prepares for performing a server-initiated action (eg.…",5,[[["self"],["sender"]],["attributeservertx"]]],[11,"notify_raw","","Sends an attribute value notification to the connected…",6,[[["handle"]]]],[8,"AttributeProvider","","Trait for attribute sets that can be hosted by an…",null,null],[10,"for_attrs_in_range","","Calls a closure `f` with every attribute whose handle is…",7,[[["self"],["handlerange"]],[["result",["error"]],["error"]]]],[10,"is_grouping_attr","","Returns whether `uuid` is a valid grouping attribute type…",7,[[["self"],["attuuid"]],["bool"]]],[10,"group_end","","Queries the last attribute that is part of the attribute…",7,[[["self"],["handle"]],[["option",["attribute"]],["attribute"]]]],[0,"beacon","rubble","BLE beacon support, without dealing with Link-Layer stuff.",null,null],[3,"Beacon","rubble::beacon","A BLE beacon.",null,null],[3,"BeaconScanner","","A passive scanner for non-connectable beacon advertisements.",null,null],[8,"ScanCallback","","Callback for the `BeaconScanner`.",null,null],[10,"beacon","","Called when a beacon is received and has passed the…",8,[[["self"],["deviceaddress"],["i"]]]],[11,"new","","Creates a new beacon that will broadcast a packet on all…",9,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"broadcast","","Broadcasts the beacon data using `tx`.",9,[[["self"],["t"]]]],[11,"new","","Creates a `BeaconScanner` that will report beacons from…",10,[[["c"]],["self"]]],[11,"with_filter","","Creates a `BeaconScanner` with a custom device filter.",10,[[["c"],["f"]],["self"]]],[11,"configure","","Configures the `BeaconScanner` and returns a `Cmd` to…",10,[[["instant"],["self"],["duration"]],["cmd"]]],[11,"timer_update","","Updates the `BeaconScanner` after the configured timer has…",10,[[["instant"],["self"]],["cmd"]]],[11,"process_adv_packet","","Processes a received advertising channel packet.",10,[[["self"],["header"],["bool"]],["cmd"]]],[0,"bytes","rubble","Utilities for decoding from and encoding into bytes.",null,null],[3,"BytesOr","rubble::bytes","Reference to a `T`, or to a byte slice that can be decoded…",null,null],[3,"ByteWriter","","Wrapper around a byte slice that can be used to encode…",null,null],[3,"ByteReader","","Allows reading values from a borrowed byte slice.",null,null],[8,"ToBytes","","Trait for encoding a value into a byte buffer.",null,null],[10,"to_bytes","","Converts `self` to bytes and writes them into `writer`,…",11,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[8,"FromBytes","","Trait for decoding values from a byte slice.",null,null],[10,"from_bytes","","Decode a `Self` from a byte slice, advancing `bytes` to…",12,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_ref","","Creates a `BytesOr` that holds on to a `T` via reference.",13,[[["t"]],["self"]]],[11,"read","","Reads the `T`, possibly by parsing the stored bytes.",13,[[["self"]],["t"]]],[11,"iter","","Returns an iterator over all `T`s stored in `self` (which…",13,[[["self"]]]],[11,"iter","","Returns an iterator over all `T`s stored in `self`.",13,[[["self"]]]],[11,"new","","Creates a writer that will write to `buf`.",14,[[],["self"]]],[11,"into_rest","","Consumes `self` and returns the part of the contained…",14,[[]]],[11,"rest","","Returns the raw buffer this `ByteWriter` would write to.",14,[[["self"]]]],[11,"skip","","Skips the given number of bytes in the output data without…",14,[[["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"split_off","","Creates and returns another `ByteWriter` that can write to…",14,[[["self"],["usize"]],[["error"],["result",["error"]]]]],[11,"split_next_mut","","Splits off the next byte in the buffer.",14,[[["self"]],[["u8"],["option",["u8"]]]]],[11,"space_left","","Returns the number of bytes that can be written to `self`…",14,[[["self"]],["usize"]]],[11,"write_slice","","Writes all bytes from `other` to `self`.",14,[[["self"]],[["result",["error"]],["error"]]]],[11,"write_slice_truncate","","Writes as many bytes as can fit from `other` into `self`.",14,[[["self"]],["usize"]]],[11,"write_u8","","Writes a single byte to `self`.",14,[[["self"],["u8"]],[["result",["error"]],["error"]]]],[11,"write_u16_le","","Writes a `u16` to `self`, using Little Endian byte order.",14,[[["u16"],["self"]],[["result",["error"]],["error"]]]],[11,"write_u32_le","","Writes a `u32` to `self`, using Little Endian byte order.",14,[[["self"],["u32"]],[["result",["error"]],["error"]]]],[11,"write_u64_le","","Writes a `u64` to `self`, using Little Endian byte order.",14,[[["self"],["u64"]],[["result",["error"]],["error"]]]],[11,"new","","Creates a new `ByteReader` that will read from the given…",15,[[],["self"]]],[11,"as_raw_bytes","","Returns a reference to the raw bytes in `self`, without…",15,[[["self"]]]],[11,"into_rest","","Consumes `self` and returns the part of the contained…",15,[[]]],[11,"skip","","Skips the given number of bytes in the input data without…",15,[[["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"split_off","","Creates and returns another `ByteReader` that will read…",15,[[["self"],["usize"]],[["error"],["result",["error"]]]]],[11,"bytes_left","","Returns the number of bytes that can still be read from…",15,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether `self` is at the end of the underlying…",15,[[["self"]],["bool"]]],[11,"read_slice","","Reads a byte slice of length `len` from `self`.",15,[[["self"],["usize"]],[["result",["error"]],["error"]]]],[11,"read_array","","Reads a byte-array-like type `S` from `self`.",15,[[["self"]],[["error"],["result",["error"]]]]],[11,"read_rest","","Reads the remaining bytes from `self`.",15,[[["self"]]]],[11,"read_u8","","Reads a single byte from `self`.",15,[[["self"]],[["result",["u8","error"]],["error"],["u8"]]]],[11,"read_u16_le","","Reads a `u16` from `self`, using Little Endian byte order.",15,[[["self"]],[["result",["u16","error"]],["u16"],["error"]]]],[11,"read_u32_le","","Reads a `u32` from `self`, using Little Endian byte order.",15,[[["self"]],[["result",["u32","error"]],["u32"],["error"]]]],[11,"read_u64_le","","Reads a `u64` from `self`, using Little Endian byte order.",15,[[["self"]],[["result",["u64","error"]],["u64"],["error"]]]],[0,"config","rubble","Stack configuration trait.",null,null],[8,"Config","rubble::config","Trait for Rubble stack configurations.",null,null],[16,"Timer","","A time source with microsecond resolution.",16,null],[16,"Transmitter","","The BLE packet transmitter (radio).",16,null],[16,"ChannelMapper","","The L2CAP channel mapper in use.",16,null],[16,"PacketQueue","","The packet queue to use for exchanging data between the…",16,null],[0,"ecdh","rubble","Elliptic Curve Diffie-Hellman (ECDH) on P-256.",null,null],[3,"P256Provider","rubble::ecdh","An ECDH provider using the pure-Rust `p256` crate.",null,null],[3,"P256SecretKey","","A secret key generated by a [`P256Provider`].",null,null],[3,"RingProvider","","An ECDH provider that uses ring under the hood.",null,null],[3,"RingSecretKey","","A secret key generated by a [`RingProvider`].",null,null],[3,"PublicKey","","A P-256 public key (point on the curve) in uncompressed…",null,null],[12,"0","","",17,null],[3,"SharedSecret","","A shared secret resulting from an ECDH key agreement.",null,null],[12,"0","","",18,null],[3,"InvalidPublicKey","","Error returned by [`SecretKey::agree`] when the public key…",null,null],[5,"run_tests","","Runs Rubble's P-256 provider testsuite against `provider`.",null,[[]]],[11,"new","","Creates a new instance.",19,[[],["self"]]],[11,"new","","Creates a new `RingProvider` that uses the system's RNG…",20,[[],["self"]]],[8,"EcdhProvider","","Trait for ECDH providers.",null,null],[16,"SecretKey","","Provider-defined secret key type.",21,null],[10,"generate_keypair","","Generates a P-256 key pair using cryptographically strong…",21,[[["self"],["r"]]]],[8,"SecretKey","","Secret key operations required by Rubble.",null,null],[10,"agree","","Performs ECDH key agreement using an ephemeral secret key…",22,[[["publickey"]],[["invalidpublickey"],["result",["sharedsecret","invalidpublickey"]],["sharedsecret"]]]],[11,"new","","Creates a new `InvalidPublicKey` error.",23,[[],["self"]]],[0,"gatt","rubble","Implementation of the Generic Attribute Profile (GATT).",null,null],[3,"BatteryServiceAttrs","rubble::gatt","A demo `AttributeProvider` that will enumerate as a…",null,null],[3,"Attributes","","",null,null],[3,"MidiServiceAttrs","","A demo `AttributeProvider` that will enumerate as a Midi…",null,null],[0,"characteristic","","",null,null],[3,"Properties","rubble::gatt::characteristic","",null,null],[3,"BatteryLevel","","",null,null],[4,"Appearance","","",null,null],[13,"Unknown","","",24,null],[13,"GenericPhone","","",24,null],[13,"GenericComputer","","",24,null],[13,"GenericWatch","","",24,null],[13,"SportsWatch","","",24,null],[13,"GenericClock","","",24,null],[13,"GenericDisplay","","",24,null],[13,"GenericRemoteControl","","",24,null],[13,"GenericEyeGlasses","","",24,null],[13,"GenericTag","","",24,null],[13,"GenericKeyring","","",24,null],[13,"GenericMediaPlayer","","",24,null],[13,"GenericBarcodeScanner","","",24,null],[13,"GenericThermometer","","",24,null],[13,"ThermometerEar","","",24,null],[13,"GenericHeartRateSensor","","",24,null],[13,"HeartRateBelt","","",24,null],[13,"GenericBloodPressure","","",24,null],[13,"BloodPressureArm","","",24,null],[13,"BloodPressureWrist","","",24,null],[13,"HumanInterfaceDevice","","",24,null],[13,"Keyboard","","",24,null],[13,"Mouse","","",24,null],[13,"Joystick","","",24,null],[13,"Gamepad","","",24,null],[13,"DigitizerTablet","","",24,null],[13,"CardReader","","",24,null],[13,"DigitalPen","","",24,null],[13,"BarcodeScanner","","",24,null],[13,"GenericGlucoseMeter","","",24,null],[13,"GenericRunningWalkingSensor","","",24,null],[13,"RunningWalkingSensorInShoe","","",24,null],[13,"RunningWalkingSensorOnShoe","","",24,null],[13,"RunningWalkingSensorOnHip","","",24,null],[13,"GenericCycling","","",24,null],[13,"CyclingComputer","","",24,null],[13,"CyclingSpeedSensor","","",24,null],[13,"CyclingCadenceSensor","","",24,null],[13,"CyclingPowerSensor","","",24,null],[13,"CyclingSpeedAndCadenceSensor","","",24,null],[13,"GenericPulseOximeter","","",24,null],[13,"PulseOximeterFingertip","","",24,null],[13,"PulseOximeterWristWorn","","",24,null],[13,"GenericWeightScale","","",24,null],[13,"GenericPersonalMobilityDevice","","",24,null],[13,"PoweredWheelchair","","",24,null],[13,"MobilityScooter","","",24,null],[13,"GenericContinuousGlucoseMonitor","","",24,null],[13,"GenericInsulinPump","","",24,null],[13,"DurableInsulinPump","","",24,null],[13,"PatchInsulingPump","","",24,null],[13,"InsulinPen","","",24,null],[13,"GenericMedicationDelivery","","",24,null],[13,"GenericOutdoorSportsActivity","","",24,null],[13,"LocationDisplayService","","",24,null],[13,"LocationAndNavigationDisplayService","","",24,null],[13,"LocationPod","","",24,null],[13,"LocationAndNavigationPod","","",24,null],[8,"Characteristic","","",null,null],[18,"PROPS","","",25,null],[18,"UUID","","The UUID assigned to the characteristic type.",25,null],[18,"BROADCAST","","",26,null],[18,"READ","","",26,null],[18,"WRITE_NO_RSP","","",26,null],[18,"WRITE","","",26,null],[18,"NOTIFY","","",26,null],[18,"INDICATE","","",26,null],[18,"AUTH_WRITES","","",26,null],[18,"EXTENDED","","",26,null],[11,"empty","","Returns an empty set of flags",26,[[],["properties"]]],[11,"all","","Returns the set containing all flags.",26,[[],["properties"]]],[11,"bits","","Returns the raw value of the flags currently stored.",26,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",26,[[["u8"]],[["option",["properties"]],["properties"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",26,[[["u8"]],["properties"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",26,[[["u8"]],["properties"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",26,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",26,[[["self"],["properties"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",26,[[["self"],["properties"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",26,[[["self"],["properties"]]]],[11,"remove","","Removes the specified flags in-place.",26,[[["self"],["properties"]]]],[11,"toggle","","Toggles the specified flags in-place.",26,[[["self"],["properties"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",26,[[["bool"],["self"],["properties"]]]],[11,"new","","",27,[[["u8"]],["self"]]],[11,"percentage","","",27,[[["self"]],["u8"]]],[11,"new","rubble::gatt","",28,[[],["self"]]],[11,"new","","",29,[[],["self"]]],[0,"l2cap","rubble","The Logical Link Control and Adaptation Protocol (L2CAP).",null,null],[3,"Channel","rubble::l2cap","An L2CAP channel identifier (CID).",null,null],[3,"ChannelData","","Data associated with a connected L2CAP channel.",null,null],[3,"BleChannelMap","","A fixed BLE channel map that provides only the required…",null,null],[3,"L2CAPState","","L2CAP channel manager and responder.",null,null],[3,"Sender","","Provides a way to send a L2CAP message with preallocated…",null,null],[3,"L2CAPStateTx","","An `L2CAPState` with the ability to transmit packets.",null,null],[8,"ChannelMapper","","Trait for L2CAP channel mappers that provide access to the…",null,null],[16,"AttributeProvider","","The attribute provider used by the ATT server.",30,null],[10,"lookup","","Look up what's connected to `channel` (eg. the `Protocol`…",30,[[["self"],["channel"]],[["channeldata",["protocolobj"]],["option",["channeldata"]]]]],[10,"att","","Returns information about the Attribute Protocol on…",30,[[["self"]],[["channeldata",["attributeserver"]],["attributeserver"]]]],[8,"ProtocolObj","","Trait for protocols that sit on top of L2CAP (object-safe…",null,null],[10,"process_message","","Process a message sent to the protocol.",31,[[["self"],["sender"]],[["result",["error"]],["error"]]]],[8,"Protocol","","Trait for protocols that sit on top of L2CAP…",null,null],[18,"RSP_PDU_SIZE","","Minimum size needed by PDUs sent by this protocol.",32,null],[18,"NULL","","The null channel identifier. Must not be used as a…",33,null],[18,"ATT","","The channel used by the Attribute Protocol (ATT).",33,null],[18,"LE_SIGNALING","","LE L2CAP signaling channel (connectionless).",33,null],[18,"LE_SECURITY_MANAGER","","LE Security Manager channel.",33,null],[11,"as_raw","","Returns the channel identifier (CID) as a raw `u16`.",33,[[["self"]],["u16"]]],[11,"is_connection_oriented","","Returns whether this channel is connection-oriented.",33,[[["self"]],["bool"]]],[11,"is_connectionless","","Returns whether this channel is connectionless.",33,[[["self"]],["bool"]]],[11,"response_channel","","Returns the `Channel` to which the response should be sent.",34,[[["self"]],["channel"]]],[11,"pdu_size","","Returns the PDU size required by the protocol.",34,[[["self"]],["u8"]]],[11,"protocol","","Returns the protocol connected to the channel.",34,[[["self"]],["p"]]],[11,"into_protocol","","Consumes `self` and returns the protocol connected to the…",34,[[],["p"]]],[11,"empty","","Creates a new channel map with no backing data for the…",35,[[],["self"]]],[11,"with_attributes","","",35,[[["a"]],["self"]]],[11,"new","","Creates a new L2CAP state using the given channel…",36,[[["m"]],["self"]]],[11,"tx","","Gives this instance the ability to transmit packets.",36,[[["self"],["p"]],[["producer"],["l2capstatetx"]]]],[11,"send","","Enqueues an L2CAP message to be sent over the data…",37,[[["self"],["tobytes"]],[["result",["error"]],["error"]]]],[11,"send_with","","Enqueues an L2CAP message encoded by a closure.",37,[[["self"]],["result"]]],[11,"process_start","","Process the start of a new L2CAP message (or a complete,…",38,[[["self"]],["consume"]]],[11,"process_cont","","Process continuation of an L2CAP message.",38,[[["self"]],["consume"]]],[11,"att","","Prepares for sending data using the Attribute Protocol.",38,[[["self"]],[["option",["attributeservertx"]],["attributeservertx"]]]],[0,"link","rubble","Link-Layer.",null,null],[3,"CompanyId","rubble::link","Company identifier for use in link layer Control PDUs.",null,null],[3,"Connection","","Connection state and parameters.",null,null],[3,"DeviceAddress","","A Bluetooth device address.",null,null],[3,"FeatureSet","","A set of optional Link Layer features.",null,null],[3,"Responder","","Data channel packet processor.",null,null],[3,"LinkLayer","","Implementation of the real-time BLE Link-Layer logic.",null,null],[3,"Cmd","","Command returned by the Link-Layer to the user.",null,null],[12,"radio","","Radio configuration request.",39,null],[12,"next_update","","Time until `LinkLayer::update` should be called.",39,null],[12,"queued_work","","Whether the Link-Layer code has enqueued more work into…",39,null],[4,"AddressKind","","Specifies whether a device address is randomly generated…",null,null],[13,"Public","","Publicly registered IEEE 802-2001 LAN MAC address.",40,null],[13,"Random","","Randomly generated address.",40,null],[4,"NextUpdate","","Specifies when the Link Layer's `update` method should be…",null,null],[13,"Disable","","Disable timer and do not call `update`.",41,null],[13,"Keep","","Keep the previously configured time.",41,null],[13,"At","","Call `update` at the given `Instant`.",41,null],[4,"RadioCmd","","Specifies if and how the radio should listen for…",null,null],[13,"Off","","Turn the radio off and don't call `LinkLayer::process_*`…",42,null],[13,"ListenAdvertising","","Listen on an advertising channel. If a packet is received,…",42,null],[12,"channel","rubble::link::RadioCmd","The advertising channel to listen on.",43,null],[13,"ListenData","rubble::link","Listen on a data channel. If a matching packet is…",42,null],[12,"channel","rubble::link::RadioCmd","The data channel to listen on.",44,null],[12,"access_address","","The Access Address to listen for.",44,null],[12,"crc_init","","Initialization value of the CRC-24 calculation.",44,null],[12,"timeout","","Flag to indicate if the last connection event timed out.",44,null],[0,"ad_structure","rubble::link","Advertising Data / Extended Inquiry Response (EIR) data.",null,null],[3,"ServiceUuids","rubble::link::ad_structure","List of service UUIDs offered by the device.",null,null],[3,"Flags","","BR/EDR and LE compatibility flags.",null,null],[4,"AdStructure","","A list of AD structures can be sent along with an…",null,null],[13,"Flags","","Device flags and baseband capabilities.",45,null],[13,"ServiceUuids16","","",45,null],[13,"ServiceUuids32","","",45,null],[13,"ServiceUuids128","","",45,null],[13,"ServiceData16","","Service data with 16-bit service UUID.",45,null],[12,"uuid","rubble::link::ad_structure::AdStructure","The 16-bit service UUID.",46,null],[12,"data","","The associated service data. May be empty.",46,null],[13,"CompleteLocalName","rubble::link::ad_structure","Sets the full (unabbreviated) device name.",45,null],[13,"ShortenedLocalName","","Sets the shortened device name.",45,null],[13,"Unknown","","An unknown or unimplemented AD structure stored as raw…",45,null],[12,"ty","rubble::link::ad_structure::AdStructure","Type byte.",47,null],[12,"data","","Raw data transmitted after the type.",47,null],[11,"from_uuids","rubble::link::ad_structure","Creates a `ServiceUuids` container from a list of UUIDs.",48,[[["bool"]],["self"]]],[11,"is_complete","","Returns a boolean indicating whether this list is complete.",48,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the UUIDs stored in `self`.",48,[[["self"]]]],[18,"LE_LIMITED_DISCOVERABLE","","",49,null],[18,"LE_GENERAL_DISCOVERABLE","","",49,null],[18,"BR_EDR_NOT_SUPPORTED","","",49,null],[18,"SIMUL_LE_BR_CONTROLLER","","",49,null],[18,"SIMUL_LE_BR_HOST","","",49,null],[11,"empty","","Returns an empty set of flags",49,[[],["flags"]]],[11,"all","","Returns the set containing all flags.",49,[[],["flags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",49,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",49,[[["u8"]],[["flags"],["option",["flags"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",49,[[["u8"]],["flags"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",49,[[["u8"]],["flags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",49,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",49,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",49,[[["self"],["flags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",49,[[["self"],["flags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",49,[[["self"],["flags"]]]],[11,"remove","","Removes the specified flags in-place.",49,[[["self"],["flags"]]]],[11,"toggle","","Toggles the specified flags in-place.",49,[[["self"],["flags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",49,[[["self"],["flags"],["bool"]]]],[11,"discoverable","","Returns flags suitable for discoverable devices that want…",49,[[],["flags"]]],[11,"broadcast","","Returns flags suitable for non-connectable devices that…",49,[[],["flags"]]],[11,"to_u8","","Returns the raw representation of the flags.",49,[[],["u8"]]],[11,"supports_classic_bluetooth","","Returns a boolean indicating whether the device that sent…",49,[[["self"]],["bool"]]],[11,"le_limited_discoverable","","Device operating in LE Limited Discoverable mode.",49,[[["self"]],["bool"]]],[11,"le_general_discoverable","","Device operating in LE General Discoverable mode.",49,[[["self"]],["bool"]]],[0,"advertising","rubble::link","Advertising channel operations.",null,null],[3,"ConnectRequestData","rubble::link::advertising","Connection parameters sent along with a `ConnectRequest`…",null,null],[3,"PduBuf","","Stores an advertising channel PDU.",null,null],[3,"Header","","16-bit Advertising Channel PDU header preceding the Payload.",null,null],[4,"Pdu","","A parsed advertising channel PDU.",null,null],[13,"ConnectableUndirected","","Connectable and scannable advertisement.",50,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.",51,null],[12,"advertising_data","","AD structures sent along with the advertisement.",51,null],[13,"ConnectableDirected","rubble::link::advertising","Directed connectable advertisement sent to an initiator.",50,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.",52,null],[12,"initiator_addr","","Intended receiver of the advertisement.",52,null],[13,"NonconnectableUndirected","rubble::link::advertising","A non-connectable undirected advertisement (aka \"beacon\").",50,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device (beacon) that is sending…",53,null],[12,"advertising_data","","AD structures sent along with the advertisement.",53,null],[13,"ScannableUndirected","rubble::link::advertising","Scannable advertisement.",50,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that is sending this PDU.",54,null],[12,"advertising_data","","AD structures sent along with the advertisement.",54,null],[13,"ScanRequest","rubble::link::advertising","Scan request sent from a scanner to an advertising device.",50,null],[12,"scanner_addr","rubble::link::advertising::Pdu","Address of the scanning device sending this PDU.",55,null],[12,"advertiser_addr","","Address of the advertising device that should be scanned.",55,null],[13,"ScanResponse","rubble::link::advertising","Response to a scan request, sent by the scanned…",50,null],[12,"advertiser_addr","rubble::link::advertising::Pdu","Address of the advertising device that responds to a scan…",56,null],[12,"scan_data","","Scan data payload, consisting of additional user-defined…",56,null],[13,"ConnectRequest","rubble::link::advertising","A request to establish a connection, sent by an initiating…",50,null],[12,"initiator_addr","rubble::link::advertising::Pdu","Address of the device initiating the connection by sending…",57,null],[12,"advertiser_addr","","Address of the intended receiver of this packet.",57,null],[12,"lldata","","Connection parameters.",57,null],[4,"SleepClockAccuracy","rubble::link::advertising","Indicates the master's sleep clock accuracy (SCA) in ppm…",null,null],[13,"Ppm251To500","","",58,null],[13,"Ppm151To250","","",58,null],[13,"Ppm101To150","","",58,null],[13,"Ppm76To100","","",58,null],[13,"Ppm51To75","","",58,null],[13,"Ppm31To50","","",58,null],[13,"Ppm21To30","","",58,null],[13,"Ppm0To20","","",58,null],[4,"PduType","","4-bit PDU type in [`Header`].",null,null],[13,"AdvInd","","Connectable undirected advertising event (`ADV_IND`).",59,null],[13,"AdvDirectInd","","Connectable directed advertising event (`ADV_DIRECT_IND`).",59,null],[13,"AdvNonconnInd","","Non-connectable undirected advertising event…",59,null],[13,"AdvScanInd","","Scannable undirected advertising event (`ADV_SCAN_IND`).",59,null],[13,"ScanReq","","Scan request (`SCAN_REQ`).",59,null],[13,"ScanRsp","","Scan response (`SCAN_RSP`).",59,null],[13,"ConnectReq","","Connect request (`CONNECT_REQ`).",59,null],[13,"Unknown","","",59,null],[17,"CRC_PRESET","","CRC initialization value for advertising channel packets.",null,null],[17,"MAX_PAYLOAD_SIZE","","Max. advertising PDU payload size in Bytes.",null,null],[17,"ACCESS_ADDRESS","","Access Address to use for all advertising channel packets.",null,null],[11,"from_header_and_payload","","Constructs a PDU by parsing `payload`.",50,[[["bytereader"],["header"]],[["error"],["result",["error"]]]]],[11,"sender","","Returns the device address of the sender of this PDU.",50,[[["self"]],["deviceaddress"]]],[11,"receiver","","Returns the intended receiver of this PDU.",50,[[["self"]],[["deviceaddress"],["option",["deviceaddress"]]]]],[11,"ty","","Returns the PDU type of `self`.",50,[[["self"]],["pdutype"]]],[11,"advertising_data","","Returns an iterator over all AD structures encoded in the…",50,[[["self"]],["option"]]],[11,"access_address","","Returns the Access Address to use for data channel…",60,[[["self"]],["u32"]]],[11,"crc_init","","Returns the initialization value for the CRC calculation.",60,[[["self"]],["u32"]]],[11,"channel_map","","Returns the channel map specified by the initiator.",60,[[["self"]],["channelmap"]]],[11,"hop","","Returns the channel hop distance.",60,[[["self"]],["u8"]]],[11,"end_of_tx_window","","Returns the end of the transmit window from reception of…",60,[[["self"]],["duration"]]],[11,"interval","","Returns the connection event interval in µs.",60,[[["self"]],["duration"]]],[11,"slave_latency","","Returns the slave latency (as the number of connection…",60,[[["self"]],["u16"]]],[11,"supervision_timeout","","Returns the connection supervision timeout…",60,[[["self"]],["duration"]]],[11,"connectable_undirected","","Creates a connectable undirected advertising PDU…",61,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"connectable_directed","","Creates a connectable directed advertising PDU…",61,[[["deviceaddress"]],["self"]]],[11,"nonconnectable_undirected","","Creates a non-connectable undirected advertising PDU…",61,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"scannable_undirected","","Creates a scannable undirected advertising PDU…",61,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"beacon","","Creates an advertising channel PDU suitable for building a…",61,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"discoverable","","Creates an advertising PDU that makes this device…",61,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"scan_request","","Creates a scan request PDU.",61,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"scan_response","","Creates a scan response PDU.",61,[[["deviceaddress"]],[["error"],["result",["error"]]]]],[11,"header","","",61,[[["self"]],["header"]]],[11,"payload","","",61,[[["self"]]]],[11,"new","","Creates a new Advertising Channel PDU header specifying…",62,[[["pdutype"]],["self"]]],[11,"parse","","",62,[[],["self"]]],[11,"to_u16","","Returns the raw representation of the header.",62,[[["self"]],["u16"]]],[11,"type_","","Returns the PDU type specified in the header.",62,[[["self"]],["pdutype"]]],[11,"tx_add","","Returns the state of the `TxAdd` field.",62,[[["self"]],["bool"]]],[11,"set_tx_add","","Sets the `TxAdd` field's value.",62,[[["self"],["bool"]]]],[11,"rx_add","","Returns the state of the `RxAdd` field.",62,[[["self"]],["bool"]]],[11,"set_rx_add","","Sets the `RxAdd` field's value.",62,[[["self"],["bool"]]]],[11,"payload_length","","Returns the length of the payload in octets as specified…",62,[[["self"]],["u8"]]],[11,"set_payload_length","","Sets the payload length of this PDU.",62,[[["self"],["u8"]]]],[11,"is_beacon","","Returns whether this PDU type is a beacon advertisement.",59,[[["self"]],["bool"]]],[11,"allows_adv_data","","Whether AD structures can follow the fixed data in a PDU…",59,[[["self"]],["bool"]]],[11,"from_raw","rubble::link","Create a company ID from a raw `u16`.",63,[[["u16"]],["self"]]],[11,"as_u16","","Get the raw `u16` representing this company identifier.",63,[[["self"]],["u16"]]],[11,"name","","Get the full company name from this identifer.",63,[[["self"]],[["option",["str"]],["str"]]]],[11,"connection_interval","","Returns the configured interval between connection events.",64,[[["self"]],["duration"]]],[0,"data","","Data Channel structures.",null,null],[3,"Header","rubble::link::data","16-bit data channel header preceding the payload.",null,null],[4,"Llid","","Values of the LLID field in `Header`.",null,null],[13,"Reserved","","Reserved for future use.",65,null],[13,"DataCont","","Continuation of L2CAP message, or empty PDU.",65,null],[13,"DataStart","","Start of L2CAP message.",65,null],[13,"Control","","LL control PDU.",65,null],[4,"Pdu","","Structured representation of a data channel PDU.",null,null],[13,"DataCont","","Continuation of an L2CAP message (or empty PDU).",66,null],[12,"message","rubble::link::data::Pdu","",67,null],[13,"DataStart","rubble::link::data","Start of an L2CAP message (must not be empty).",66,null],[12,"message","rubble::link::data::Pdu","",68,null],[13,"Control","rubble::link::data","LL Control PDU for controlling the Link-Layer connection.",66,null],[12,"data","rubble::link::data::Pdu","",69,null],[11,"new","rubble::link::data","Creates a header with the given LLID field and all other…",70,[[["llid"]],["self"]]],[11,"parse","","Parses a header from raw bytes.",70,[[],["self"]]],[11,"to_u16","","Returns the raw representation of the header.",70,[[["self"]],["u16"]]],[11,"payload_length","","Returns the length of the payload in octets as specified…",70,[[["self"]],["u8"]]],[11,"set_payload_length","","Sets the payload length field to `len`.",70,[[["self"],["u8"]]]],[11,"llid","","Returns the `LLID` field (PDU type).",70,[[["self"]],["llid"]]],[11,"nesn","","Returns the value of the `NESN` field (Next Expected…",70,[[["self"]],["seqnum"]]],[11,"set_nesn","","Sets the value of the `NESN` field.",70,[[["self"],["seqnum"]]]],[11,"sn","","Returns the value of the `SN` field (Sequence Number).",70,[[["self"]],["seqnum"]]],[11,"set_sn","","Sets the value of the `SN` field.",70,[[["self"],["seqnum"]]]],[11,"md","","Returns whether the `MD` field is set (More Data).",70,[[["self"]],["bool"]]],[11,"set_md","","Sets the value of the `MD` field.",70,[[["self"],["bool"]]]],[11,"empty","","Creates an empty PDU that carries no message.",66,[[],["self"]]],[11,"llid","","Returns the `LLID` field to use for this PDU.",66,[[["self"]],["llid"]]],[11,"parse","","Parses a PDU from a `Header` and raw payload.",66,[[["header"]],[["error"],["result",["error"]]]]],[11,"new","rubble::link","Create a new device address from 6 raw Bytes and an…",71,[[["addresskind"]],["self"]]],[11,"kind","","Returns the address kind.",71,[[["self"]],["addresskind"]]],[11,"is_random","","Returns whether this address is randomly generated.",71,[[["self"]],["bool"]]],[11,"raw","","Returns the raw bytes making up this address (LSB first).",71,[[["self"]]]],[18,"LE_ENCRYPTION","","Low-Energy data encryption.",72,null],[18,"CONN_PARAM_REQ","","Connection parameters request procedure.",72,null],[18,"EXTENDED_REJECT_INDICATION","","Support for the LL Control PDU `LL_REJECT_IND_EXT`.",72,null],[18,"SLAVE_FEATURE_EXCHANGE","","Slave-initiated feature exchange.",72,null],[18,"LE_PING","","Low-Energy Link-Layer ping exchange.",72,null],[18,"LE_PACKET_LENGTH_EXTENSION","","Link-Layer PDU length update (support for data channel…",72,null],[18,"LL_PRIVACY","","Support for untrackable randomized device addresses (LL…",72,null],[18,"EXT_SCANNER_FILTER_POLICIES","","Extended scan filter policies.",72,null],[11,"empty","","Returns an empty set of flags",72,[[],["featureset"]]],[11,"all","","Returns the set containing all flags.",72,[[],["featureset"]]],[11,"bits","","Returns the raw value of the flags currently stored.",72,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",72,[[["u64"]],[["featureset"],["option",["featureset"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",72,[[["u64"]],["featureset"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",72,[[["u64"]],["featureset"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",72,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",72,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",72,[[["self"],["featureset"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",72,[[["self"],["featureset"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",72,[[["self"],["featureset"]]]],[11,"remove","","Removes the specified flags in-place.",72,[[["self"],["featureset"]]]],[11,"toggle","","Toggles the specified flags in-place.",72,[[["self"],["featureset"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",72,[[["self"],["featureset"],["bool"]]]],[11,"supported","","Returns the feature set supported by Rubble.",72,[[],["self"]]],[0,"filter","","Link-Layer Device Filtering.",null,null],[3,"AllowAll","rubble::link::filter","An `AddressFilter` that allows all devices (ie. no…",null,null],[3,"WhitelistFilter","","An `AddressFilter` that checks device addresses against a…",null,null],[3,"AdvFilter","","Advertising filter policy. Governs which devices may scan…",null,null],[3,"ScanFilter","","Scanner filter policy. Governs which devices will be…",null,null],[6,"SliceIter","","",null,null],[6,"SingleIter","","",null,null],[8,"AddressFilter","","",null,null],[10,"matches","","",73,[[["self"],["deviceaddress"]],["bool"]]],[11,"new","","Creates a device whitelist from an iterator yielding the…",74,[[["i"]],["self"]]],[11,"from_slice","","Creates a device whitelist from a slice of device addresses.",74,[[],["self"]]],[11,"from_address","","Creates a device whitelist that will allow a single device.",74,[[["deviceaddress"]],["self"]]],[11,"new","","Creates a new filter policy from behaviors for scan and…",75,[[["c"],["s"]],["self"]]],[11,"may_scan","","",75,[[["self"],["deviceaddress"]],["bool"]]],[11,"may_connect","","",75,[[["self"],["deviceaddress"]],["bool"]]],[11,"new","","Creates a new scanner filter policy from an `AddressFilter`.",76,[[["s"]],["self"]]],[11,"should_scan","","",76,[[["self"],["deviceaddress"]],["bool"]]],[0,"llcp","rubble::link","Defines packet structures used by the Link Layer Control…",null,null],[3,"ConnectionParamRequest","rubble::link::llcp","A connection parameter update request or response…",null,null],[3,"ConnectionUpdateData","","Data transmitted with an `LL_CONNECTION_UPDATE_REQ`…",null,null],[4,"ControlPdu","","A structured representation of an LL Control PDU used by…",null,null],[13,"ConnectionUpdateReq","","`0x00`/`LL_CONNECTION_UPDATE_REQ` - Update connection…",77,null],[13,"ChannelMapReq","","`0x01`/`LL_CHANNEL_MAP_REQ` - Update the channel map.",77,null],[12,"map","rubble::link::llcp::ControlPdu","",78,null],[12,"instant","","",78,null],[13,"TerminateInd","rubble::link::llcp","`0x02`/`LL_TERMINATE_IND` - Close the connection.",77,null],[12,"error_code","rubble::link::llcp::ControlPdu","",79,null],[13,"UnknownRsp","rubble::link::llcp","`0x07`/`LL_UNKNOWN_RSP` - Response to unknown/unsupported…",77,null],[12,"unknown_type","rubble::link::llcp::ControlPdu","Opcode of the unknown PDU.",80,null],[13,"FeatureReq","rubble::link::llcp","`0x08`/`LL_FEATURE_REQ` - Master requests slave's features.",77,null],[12,"features_master","rubble::link::llcp::ControlPdu","Supported feature set of the master.",81,null],[13,"FeatureRsp","rubble::link::llcp","`0x09`/`LL_FEATURE_RSP` - Slave answers `LL_FEATURE_REQ`…",77,null],[12,"features_used","rubble::link::llcp::ControlPdu","Features that will be used for the connection. Logical…",82,null],[13,"VersionInd","rubble::link::llcp","`0x0C`/`LL_VERSION_IND` - Bluetooth version indication…",77,null],[12,"vers_nr","rubble::link::llcp::ControlPdu","",83,null],[12,"comp_id","","",83,null],[12,"sub_vers_nr","","",83,null],[13,"ConnectionParamReq","rubble::link::llcp","",77,null],[13,"ConnectionParamRsp","","",77,null],[13,"Unknown","","Catch-all variant for unsupported opcodes.",77,null],[12,"opcode","rubble::link::llcp::ControlPdu","The opcode we don't support. This can also be the…",84,null],[12,"ctr_data","","Additional data depending on the opcode.",84,null],[4,"ControlOpcode","rubble::link::llcp","Enumeration of all known LL Control PDU opcodes (not all…",null,null],[13,"ConnectionUpdateReq","","",85,null],[13,"ChannelMapReq","","",85,null],[13,"TerminateInd","","",85,null],[13,"EncReq","","",85,null],[13,"EncRsp","","",85,null],[13,"StartEncReq","","",85,null],[13,"StartEncRsp","","",85,null],[13,"UnknownRsp","","",85,null],[13,"FeatureReq","","",85,null],[13,"FeatureRsp","","",85,null],[13,"PauseEncReq","","",85,null],[13,"PauseEncRsp","","",85,null],[13,"VersionInd","","",85,null],[13,"RejectInd","","",85,null],[13,"SlaveFeatureReq","","",85,null],[13,"ConnectionParamReq","","",85,null],[13,"ConnectionParamRsp","","",85,null],[13,"RejectIndExt","","",85,null],[13,"PingReq","","",85,null],[13,"PingRsp","","",85,null],[13,"LengthReq","","",85,null],[13,"LengthRsp","","",85,null],[13,"Unknown","","",85,null],[4,"VersionNumber","","Enumeration of all possible `VersNr` for `LL_VERSION_IND`…",null,null],[13,"V4_0","","",86,null],[13,"V4_1","","",86,null],[13,"V4_2","","",86,null],[13,"V5_0","","",86,null],[13,"V5_1","","",86,null],[13,"Unknown","","",86,null],[11,"new","","Creates a new connection update request structure filled…",87,[[],["self"]]],[11,"set_conn_interval","","Sets the minimum and maximum requested connection interval.",87,[[["self"],["duration"]]]],[11,"min_conn_interval","","Returns the minimum requested connection interval.",87,[[["self"]],["duration"]]],[11,"max_conn_interval","","Returns the maximum requested connection interval.",87,[[["self"]],["duration"]]],[11,"slave_latency","","Returns the slave latency in number of connection events.",87,[[["self"]],["u16"]]],[11,"supervision_timeout","","Returns the supervision timeout.",87,[[["self"]],["duration"]]],[11,"win_size","","Returns the size of the transmit window for the first PDU…",88,[[["self"]],["duration"]]],[11,"win_offset","","Returns the offset of the transmit window, as a duration…",88,[[["self"]],["duration"]]],[11,"interval","","Returns the duration between connection events.",88,[[["self"]],["duration"]]],[11,"latency","","Returns the slave latency.",88,[[["self"]],["u16"]]],[11,"timeout","","Returns the connection supervision timeout…",88,[[["self"]],["duration"]]],[11,"instant","","Returns the instant at which these changes should take…",88,[[["self"]],["u16"]]],[11,"opcode","","Returns the opcode of this LL Control PDU.",77,[[["self"]],["controlopcode"]]],[11,"encoded_size","","Returns the encoded size of this LLCPDU, including the…",77,[[["self"]],["u8"]]],[0,"queue","rubble::link","An SPSC queue for data channel PDUs.",null,null],[3,"Consume","rubble::link::queue","Bundles a `T` along with information telling a queue…",null,null],[3,"SimpleQueue","","A simple packet queue that can hold a single packet.",null,null],[3,"SimpleProducer","","Producer (writer) half returned by `SimpleQueue::split`.",null,null],[3,"SimpleConsumer","","Consumer (reader) half returned by `SimpleQueue::split`.",null,null],[5,"run_tests","","Runs Rubble's packet queue testsuite against the given…",null,[[]]],[8,"PacketQueue","","A splittable SPSC queue for data channel PDUs.",null,null],[16,"Producer","","Producing (writing) half of the queue.",89,null],[16,"Consumer","","Consuming (reading) half of the queue.",89,null],[10,"split","","Splits the queue into its producing and consuming ends.",89,[[]]],[8,"Producer","","The producing (writing) half of a packet queue.",null,null],[10,"free_space","","Returns the largest payload size that can be successfully…",90,[[["self"]],["u8"]]],[10,"produce_dyn","","Enqueues a PDU with known size using a closure.",90,[[["fnmut"],["self"],["u8"]],[["result",["error"]],["error"]]]],[11,"produce_with","","Enqueues a PDU with known size using a closure.",90,[[["self"],["u8"]],["result"]]],[8,"Consumer","","The consuming (reading) half of a packet queue.",null,null],[10,"has_data","","Returns whether there is a packet to dequeue.",91,[[["self"]],["bool"]]],[10,"consume_raw_with","","Passes the next raw packet in the queue to a closure.",91,[[["self"]],[["error"],["result",["error"]]]]],[11,"consume_pdu_with","","Passes the next packet in the queue to a closure.",91,[[["self"]],[["error"],["result",["error"]]]]],[11,"new","","Consume the currently processed packet iff `consume` is…",92,[[["error"],["result",["error"]],["bool"]],["self"]]],[11,"always","","Consume the currently processed packet, then return…",92,[[["error"],["result",["error"]]],["self"]]],[11,"never","","Do not consume the currently processed packet, then return…",92,[[["error"],["result",["error"]]],["self"]]],[11,"on_success","","Consume the currently processed packet if `result`…",92,[[["error"],["result",["error"]]],["self"]]],[11,"new","","Creates a new, empty queue.",93,[[],["self"]]],[11,"new","rubble::link","Creates a new packet processor hooked up to data channel…",94,[[["l2capstate"]],["self"]]],[11,"has_work","","Returns `true` when this responder has work to do.",94,[[["self"]],["bool"]]],[11,"process_one","","Processes a single incoming packet in the packet queue.",94,[[["self"]],[["result",["error"]],["error"]]]],[11,"l2cap","","Obtains access to the L2CAP instance.",94,[[["self"]],["l2capstatetx"]]],[17,"CRC_POLY","","The CRC polynomial to use for CRC24 generation.",null,null],[17,"MIN_DATA_PAYLOAD_BUF","","Min. size a data PDU payload buffer must have (assuming…",null,null],[17,"MIN_DATA_PDU_BUF","","Min. size a data PDU buffer must have.",null,null],[17,"MIN_PAYLOAD_BUF","","Min. size a PDU payload buffer must have (to cover both…",null,null],[17,"MIN_PDU_BUF","","Min. size a Link-Layer PDU buffer must have (to cover both…",null,null],[17,"MIN_PACKET_BUF","","Min. size a buffer for Link-Layer packets must have to…",null,null],[8,"Transmitter","","Trait for Link Layer packet transmission.",null,null],[10,"tx_payload_buf","","Get a reference to the Transmitter's PDU payload buffer.",95,[[["self"]]]],[10,"transmit_advertising","","Transmit an Advertising Channel PDU.",95,[[["advertisingchannel"],["self"],["header"]]]],[10,"transmit_data","","Transmit a Data Channel PDU.",95,[[["header"],["u32"],["datachannel"],["self"]]]],[11,"new","","Creates a new Link-Layer.",96,[[["deviceaddress"]],["self"]]],[11,"timer","","Returns a reference to the timer instance used by the…",96,[[["self"]]]],[11,"start_advertise","","Starts advertising this device, optionally sending data…",96,[[["self"],["duration"]],[["nextupdate"],["error"],["result",["nextupdate","error"]]]]],[11,"process_adv_packet","","Process an incoming packet from an advertising channel.",96,[[["header"],["instant"],["self"],["bool"]],["cmd"]]],[11,"process_data_packet","","Process an incoming data channel packet.",96,[[["header"],["instant"],["self"],["bool"]],["cmd"]]],[11,"update_timer","","Update the Link-Layer state after the timer expires.",96,[[["self"]],["cmd"]]],[11,"connection","","Returns a reference to the connection state.",96,[[["self"]],[["connection"],["option",["connection"]]]]],[11,"is_advertising","","Returns whether the Link-Layer is currently broadcasting…",96,[[["self"]],["bool"]]],[11,"is_connected","","Returns whether the Link-Layer is currently connected.",96,[[["self"]],["bool"]]],[0,"phy","rubble","Physical layer interactions.",null,null],[3,"AdvertisingChannel","rubble::phy","One of the three advertising channels (channel indices 37,…",null,null],[3,"DataChannel","","One of 37 data channels on which data channel PDUs are…",null,null],[8,"Radio","","Trait for raw 2.4 GHz non-BLE-specific radios.",null,null],[10,"transmit","","Transmit every Byte in `buf` over the air, LSb first, at…",97,[[["u16"],["self"]]]],[11,"first","","Returns the first (lowest-numbered) advertising channel.",98,[[],["self"]]],[11,"iter_all","","Returns an iterator that yields all 3 advertising channels…",98,[[]]],[11,"cycle","","Returns the next advertising channel, or the first one if…",98,[[["self"]],["self"]]],[11,"rf_channel","","Returns the RF channel corresponding to this advertising…",98,[[["self"]],["u8"]]],[11,"freq","","Returns the center frequency of this channel in MHz.",98,[[["self"]],["u16"]]],[11,"whitening_iv","","Calculates the initial value of the LFSR to use for data…",98,[[["self"]],["u8"]]],[11,"new","","Creates a `DataChannel` from a raw index.",99,[[["u8"]],["self"]]],[11,"index","","Returns the data channel index.",99,[[["self"]],["u8"]]],[11,"rf_channel","","Returns the RF channel corresponding to this data channel…",99,[[["self"]],["u8"]]],[11,"freq","","Returns the center frequency of this channel in MHz.",99,[[["self"]],["u16"]]],[11,"whitening_iv","","Calculates the initial value of the LFSR to use for data…",99,[[["self"]],["u8"]]],[0,"security","rubble","The LE Security Manager protocol.",null,null],[3,"NoSecurity","rubble::security","LE Secure Connections are not supported and will not be…",null,null],[3,"SecureConnections","","Indicates support for LE Secure Connections.",null,null],[3,"SecurityManager","","The LE Security Manager.",null,null],[3,"AuthReq","","Authentication requirements exchanged during pairing…",null,null],[3,"KeyDistribution","","Indicates which types of keys a device requests for…",null,null],[4,"IoCapabilities","","Describes the I/O capabilities of a device that can be…",null,null],[13,"DisplayOnly","","Device can display a 6-digit number, but has no input…",100,null],[13,"DisplayYesNo","","Device can display a 6-digit number and the user can input…",100,null],[13,"KeyboardOnly","","Device does not have output capability, but the user can…",100,null],[13,"NoInputNoOutput","","Device has no meaningful input and output capabilities.",100,null],[13,"KeyboardDisplay","","Device can display a 6-digit passcode and allows passcode…",100,null],[13,"Unknown","","",100,null],[4,"BondingType","","Whether to perform bonding in addition to pairing.",null,null],[13,"NoBonding","","No bonding should be performed; the exchanged keys should…",101,null],[13,"Bonding","","Permanently store the exchanged keys to allow resuming…",101,null],[13,"Unknown","","",101,null],[8,"SecurityLevel","","Supported security levels.",null,null],[18,"MTU","","The L2CAP MTU required by this security level.",102,null],[11,"no_security","","",103,[[],["self"]]],[11,"bonding_type","","Returns the requested bonding.",104,[[["self"]],["bondingtype"]]],[11,"set_bonding_type","","",104,[[["self"],["bondingtype"]]]],[11,"mitm","","Returns whether MITM protection is requested.",104,[[["self"]],["bool"]]],[11,"set_mitm","","",104,[[["self"],["bool"]]]],[11,"secure_connection","","Returns whether LE Secure Connection pairing is supported…",104,[[["self"]],["bool"]]],[11,"set_secure_connection","","Sets whether LE Secure Connection pairing is supported and…",104,[[["self"],["bool"]]]],[11,"keypress","","",104,[[["self"]],["bool"]]],[11,"set_keypress","","",104,[[["self"],["bool"]]]],[18,"ENC_KEY","","",105,null],[18,"ID_KEY","","",105,null],[18,"SIGN_KEY","","",105,null],[18,"LINK_KEY","","",105,null],[11,"empty","","Returns an empty set of flags",105,[[],["keydistribution"]]],[11,"all","","Returns the set containing all flags.",105,[[],["keydistribution"]]],[11,"bits","","Returns the raw value of the flags currently stored.",105,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",105,[[["u8"]],[["keydistribution"],["option",["keydistribution"]]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",105,[[["u8"]],["keydistribution"]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",105,[[["u8"]],["keydistribution"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",105,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",105,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",105,[[["self"],["keydistribution"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",105,[[["self"],["keydistribution"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",105,[[["self"],["keydistribution"]]]],[11,"remove","","Removes the specified flags in-place.",105,[[["self"],["keydistribution"]]]],[11,"toggle","","Toggles the specified flags in-place.",105,[[["self"],["keydistribution"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",105,[[["self"],["keydistribution"],["bool"]]]],[0,"time","rubble","Time APIs for obtaining the current time and calculating…",null,null],[3,"Duration","rubble::time","A duration with microsecond resolution.",null,null],[3,"Instant","","A point in time, relative to an unspecfied epoch.",null,null],[8,"Timer","","Trait for time providers.",null,null],[10,"now","","Obtain the current time as an `Instant`.",106,[[["self"]],["instant"]]],[18,"T_IFS","","The duration of the interframe spacing between BLE packets.",107,null],[11,"from_micros","","Creates a `Duration` from a number of microseconds.",107,[[["u32"]],["self"]]],[11,"from_millis","","Creates a `Duration` representing the given number of…",107,[[["u16"]],["self"]]],[11,"from_secs","","Creates a `Duration` representing a number of seconds.",107,[[["u16"]],["self"]]],[11,"whole_secs","","Returns the number of whole seconds that fit in `self`.",107,[[["self"]],["u32"]]],[11,"whole_millis","","Returns the number of whole milliseconds that fit in `self`.",107,[[["self"]],["u32"]]],[11,"as_micros","","Returns the number of microseconds represented by `self`.",107,[[["self"]],["u32"]]],[11,"subsec_micros","","Returns the fractional part of microseconds in `self`.",107,[[["self"]],["u32"]]],[18,"MAX_TIME_BETWEEN","","The maximum time between two `Instant`s that can be…",108,null],[11,"from_raw_micros","","Creates an `Instant` from raw microseconds since an…",108,[[["u32"]],["self"]]],[11,"raw_micros","","Returns the raw value from which this `Instant` was created.",108,[[["self"]],["u32"]]],[11,"duration_since","","Calculates the duration of time that has passed between…",108,[[["instant"],["self"]],["duration"]]],[0,"uuid","rubble","BLE UUIDs (16, 32 or 128 bits).",null,null],[3,"Uuid","rubble::uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Uuid16","","A 16-bit UUID alias.",null,null],[12,"0","","",109,null],[3,"Uuid32","","A 32-bit UUID alias.",null,null],[12,"0","","",110,null],[4,"UuidKind","","List of the supported UUID types.",null,null],[13,"Uuid16","","",111,null],[13,"Uuid32","","",111,null],[13,"Uuid128","","",111,null],[8,"IsUuid","","Marker for UUID types.",null,null],[18,"KIND","","",112,null],[17,"BLUETOOTH_VERSION","rubble","Version of the Bluetooth specification implemented by…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","rubble::att","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"into","","",113,[[],["u"]]],[11,"try_into","","",113,[[],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"type_id","","",113,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"from","rubble::beacon","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","rubble::bytes","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","rubble::ecdh","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",114,[[["t"]],["t"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"into","","",114,[[],["u"]]],[11,"try_into","","",114,[[],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"type_id","","",114,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"into","","",115,[[],["u"]]],[11,"try_into","","",115,[[],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"type_id","","",115,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"from","rubble::gatt","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",116,[[["t"]],["t"]]],[11,"into_iter","","",116,[[],["i"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"into","","",116,[[],["u"]]],[11,"try_into","","",116,[[],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"type_id","","",116,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","rubble::gatt::characteristic","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"from","rubble::l2cap","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into","","",35,[[],["u"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into","","",36,[[],["u"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"into","","",37,[[],["u"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"into","","",38,[[],["u"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","rubble::link","",63,[[["t"]],["t"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"into","","",63,[[],["u"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"into","","",64,[[],["u"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"into","","",71,[[],["u"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"to_string","","",71,[[["self"]],["string"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"into","","",72,[[],["u"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"from","","",94,[[["t"]],["t"]]],[11,"try_from","","",94,[[["u"]],["result"]]],[11,"into","","",94,[[],["u"]]],[11,"try_into","","",94,[[],["result"]]],[11,"borrow","","",94,[[["self"]],["t"]]],[11,"borrow_mut","","",94,[[["self"]],["t"]]],[11,"type_id","","",94,[[["self"]],["typeid"]]],[11,"from","","",96,[[["t"]],["t"]]],[11,"try_from","","",96,[[["u"]],["result"]]],[11,"into","","",96,[[],["u"]]],[11,"try_into","","",96,[[],["result"]]],[11,"borrow","","",96,[[["self"]],["t"]]],[11,"borrow_mut","","",96,[[["self"]],["t"]]],[11,"type_id","","",96,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"into","","",39,[[],["u"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"into","","",40,[[],["u"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"into","","",41,[[],["u"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"into","","",42,[[],["u"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"from","rubble::link::ad_structure","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"into","","",48,[[],["u"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"into","","",49,[[],["u"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"into","","",45,[[],["u"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"from","rubble::link::advertising","",60,[[["t"]],["t"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"into","","",60,[[],["u"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"into","","",61,[[],["u"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"into","","",62,[[],["u"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"into","","",50,[[],["u"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"into","","",58,[[],["u"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"from","","",59,[[["t"]],["t"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"into","","",59,[[],["u"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","rubble::link::data","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"into","","",70,[[],["u"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"into","","",65,[[],["u"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"into","","",66,[[],["u"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from","rubble::link::filter","",117,[[["t"]],["t"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"into","","",117,[[],["u"]]],[11,"try_into","","",117,[[],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"type_id","","",117,[[["self"]],["typeid"]]],[11,"from","","",74,[[["t"]],["t"]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"into","","",74,[[],["u"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"into","","",75,[[],["u"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"into","","",76,[[],["u"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"from","rubble::link::llcp","",87,[[["t"]],["t"]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"into","","",87,[[],["u"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,[[["self"],["t"]]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"into","","",88,[[],["u"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,[[["self"],["t"]]]],[11,"from","","",77,[[["t"]],["t"]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"into","","",77,[[],["u"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"into","","",85,[[],["u"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"into","","",86,[[],["u"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"from","rubble::link::queue","",92,[[["t"]],["t"]]],[11,"try_from","","",92,[[["u"]],["result"]]],[11,"into","","",92,[[],["u"]]],[11,"try_into","","",92,[[],["result"]]],[11,"borrow","","",92,[[["self"]],["t"]]],[11,"borrow_mut","","",92,[[["self"]],["t"]]],[11,"type_id","","",92,[[["self"]],["typeid"]]],[11,"from","","",93,[[["t"]],["t"]]],[11,"try_from","","",93,[[["u"]],["result"]]],[11,"into","","",93,[[],["u"]]],[11,"try_into","","",93,[[],["result"]]],[11,"borrow","","",93,[[["self"]],["t"]]],[11,"borrow_mut","","",93,[[["self"]],["t"]]],[11,"type_id","","",93,[[["self"]],["typeid"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"into","","",118,[[],["u"]]],[11,"try_into","","",118,[[],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"type_id","","",118,[[["self"]],["typeid"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"into","","",119,[[],["u"]]],[11,"try_into","","",119,[[],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"type_id","","",119,[[["self"]],["typeid"]]],[11,"from","rubble::phy","",98,[[["t"]],["t"]]],[11,"try_from","","",98,[[["u"]],["result"]]],[11,"into","","",98,[[],["u"]]],[11,"try_into","","",98,[[],["result"]]],[11,"borrow","","",98,[[["self"]],["t"]]],[11,"borrow_mut","","",98,[[["self"]],["t"]]],[11,"type_id","","",98,[[["self"]],["typeid"]]],[11,"to_owned","","",98,[[["self"]],["t"]]],[11,"clone_into","","",98,[[["self"],["t"]]]],[11,"from","","",99,[[["t"]],["t"]]],[11,"try_from","","",99,[[["u"]],["result"]]],[11,"into","","",99,[[],["u"]]],[11,"try_into","","",99,[[],["result"]]],[11,"borrow","","",99,[[["self"]],["t"]]],[11,"borrow_mut","","",99,[[["self"]],["t"]]],[11,"type_id","","",99,[[["self"]],["typeid"]]],[11,"to_owned","","",99,[[["self"]],["t"]]],[11,"clone_into","","",99,[[["self"],["t"]]]],[11,"from","rubble::security","",120,[[["t"]],["t"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"into","","",120,[[],["u"]]],[11,"try_into","","",120,[[],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"type_id","","",120,[[["self"]],["typeid"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"into","","",121,[[],["u"]]],[11,"try_into","","",121,[[],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"type_id","","",121,[[["self"]],["typeid"]]],[11,"from","","",103,[[["t"]],["t"]]],[11,"try_from","","",103,[[["u"]],["result"]]],[11,"into","","",103,[[],["u"]]],[11,"try_into","","",103,[[],["result"]]],[11,"borrow","","",103,[[["self"]],["t"]]],[11,"borrow_mut","","",103,[[["self"]],["t"]]],[11,"type_id","","",103,[[["self"]],["typeid"]]],[11,"from","","",104,[[["t"]],["t"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"into","","",104,[[],["u"]]],[11,"try_into","","",104,[[],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"type_id","","",104,[[["self"]],["typeid"]]],[11,"to_owned","","",104,[[["self"]],["t"]]],[11,"clone_into","","",104,[[["self"],["t"]]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"into","","",105,[[],["u"]]],[11,"try_into","","",105,[[],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"type_id","","",105,[[["self"]],["typeid"]]],[11,"to_owned","","",105,[[["self"]],["t"]]],[11,"clone_into","","",105,[[["self"],["t"]]]],[11,"from","","",100,[[["t"]],["t"]]],[11,"try_from","","",100,[[["u"]],["result"]]],[11,"into","","",100,[[],["u"]]],[11,"try_into","","",100,[[],["result"]]],[11,"borrow","","",100,[[["self"]],["t"]]],[11,"borrow_mut","","",100,[[["self"]],["t"]]],[11,"type_id","","",100,[[["self"]],["typeid"]]],[11,"to_owned","","",100,[[["self"]],["t"]]],[11,"clone_into","","",100,[[["self"],["t"]]]],[11,"from","","",101,[[["t"]],["t"]]],[11,"try_from","","",101,[[["u"]],["result"]]],[11,"into","","",101,[[],["u"]]],[11,"try_into","","",101,[[],["result"]]],[11,"borrow","","",101,[[["self"]],["t"]]],[11,"borrow_mut","","",101,[[["self"]],["t"]]],[11,"type_id","","",101,[[["self"]],["typeid"]]],[11,"to_owned","","",101,[[["self"]],["t"]]],[11,"clone_into","","",101,[[["self"],["t"]]]],[11,"from","rubble::time","",107,[[["t"]],["t"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"into","","",107,[[],["u"]]],[11,"try_into","","",107,[[],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"type_id","","",107,[[["self"]],["typeid"]]],[11,"to_owned","","",107,[[["self"]],["t"]]],[11,"clone_into","","",107,[[["self"],["t"]]]],[11,"to_string","","",107,[[["self"]],["string"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"into","","",108,[[],["u"]]],[11,"try_into","","",108,[[],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"type_id","","",108,[[["self"]],["typeid"]]],[11,"to_owned","","",108,[[["self"]],["t"]]],[11,"clone_into","","",108,[[["self"],["t"]]]],[11,"to_string","","",108,[[["self"]],["string"]]],[11,"from","rubble::uuid","",122,[[["t"]],["t"]]],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"into","","",122,[[],["u"]]],[11,"try_into","","",122,[[],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"type_id","","",122,[[["self"]],["typeid"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,[[["self"],["t"]]]],[11,"to_string","","",122,[[["self"]],["string"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"into","","",109,[[],["u"]]],[11,"try_into","","",109,[[],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"type_id","","",109,[[["self"]],["typeid"]]],[11,"to_owned","","",109,[[["self"]],["t"]]],[11,"clone_into","","",109,[[["self"],["t"]]]],[11,"from","","",110,[[["t"]],["t"]]],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"into","","",110,[[],["u"]]],[11,"try_into","","",110,[[],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"type_id","","",110,[[["self"]],["typeid"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,[[["self"],["t"]]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"into","","",111,[[],["u"]]],[11,"try_into","","",111,[[],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"type_id","","",111,[[["self"]],["typeid"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,[[["self"],["t"]]]],[11,"from_str","","",122,[[["str"]],[["result",["uuid"]],["uuid"]]]],[11,"eq","","",122,[[["self"],["uuid"]],["bool"]]],[11,"ne","","",122,[[["self"],["uuid"]],["bool"]]],[11,"clone","","",122,[[["self"]],["uuid"]]],[11,"fmt","","",122,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","","",122,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"hash","","",122,[[["self"],["__h"]]]],[11,"cmp","","",122,[[["self"],["uuid"]],["ordering"]]],[11,"default","","",122,[[],["uuid"]]],[11,"fmt","","",122,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"partial_cmp","","",122,[[["self"],["uuid"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",122,[[["self"],["uuid"]],["bool"]]],[11,"le","","",122,[[["self"],["uuid"]],["bool"]]],[11,"gt","","",122,[[["self"],["uuid"]],["bool"]]],[11,"ge","","",122,[[["self"],["uuid"]],["bool"]]],[11,"fmt","","",122,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"for_attrs_in_range","rubble::att","",113,[[["self"],["handlerange"]],[["result",["error"]],["error"]]]],[11,"is_grouping_attr","","",113,[[["self"],["attuuid"]],["bool"]]],[11,"group_end","","",113,[[["self"],["handle"]],[["option",["attribute"]],["attribute"]]]],[11,"for_attrs_in_range","rubble::gatt","",28,[[["self"],["handlerange"]],[["result",["error"]],["error"]]]],[11,"is_grouping_attr","","",28,[[["self"],["attuuid"]],["bool"]]],[11,"group_end","","",28,[[["self"],["handle"]],[["option",["attribute"]],["attribute"]]]],[11,"for_attrs_in_range","","",29,[[["self"],["handlerange"]],[["result",["error"]],["error"]]]],[11,"is_grouping_attr","","",29,[[["self"],["attuuid"]],["bool"]]],[11,"group_end","","",29,[[["self"],["handle"]],[["option",["attribute"]],["attribute"]]]],[11,"to_bytes","rubble::att","",3,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",2,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::bytes","",13,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::l2cap","",33,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link::ad_structure","Lowers this AD structure into a Byte buffer.",45,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",48,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link::advertising","",62,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link::data","",66,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link","",72,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::link::llcp","",87,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",77,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","rubble::uuid","",109,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",110,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"to_bytes","","",122,[[["self"],["bytewriter"]],[["result",["error"]],["error"]]]],[11,"from_bytes","rubble::att","",3,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",2,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::bytes","",13,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",13,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::l2cap","",33,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::link::ad_structure","",45,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",48,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::link::advertising","",50,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",60,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",62,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::link","",72,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::link::llcp","",87,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",77,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","rubble::uuid","",109,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",110,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"from_bytes","","",122,[[["bytereader"]],[["error"],["result",["error"]]]]],[11,"generate_keypair","rubble::ecdh","",19,[[["self"],["r"]]]],[11,"generate_keypair","","",20,[[["self"],["r"]]]],[11,"agree","","",114,[[["publickey"]],[["invalidpublickey"],["result",["sharedsecret","invalidpublickey"]],["sharedsecret"]]]],[11,"agree","","",115,[[["publickey"]],[["invalidpublickey"],["result",["sharedsecret","invalidpublickey"]],["sharedsecret"]]]],[11,"lookup","rubble::l2cap","",35,[[["self"],["channel"]],[["channeldata",["protocolobj"]],["option",["channeldata"]]]]],[11,"att","","",35,[[["self"]],[["channeldata",["attributeserver"]],["attributeserver"]]]],[11,"process_message","rubble::att","",5,[[["self"],["sender"]],[["result",["error"]],["error"]]]],[11,"process_message","rubble::security","",103,[[["self"],["sender"]],[["result",["error"]],["error"]]]],[11,"matches","rubble::link::filter","",117,[[["self"],["deviceaddress"]],["bool"]]],[11,"matches","","",74,[[["self"],["deviceaddress"]],["bool"]]],[11,"free_space","rubble::link::queue","",118,[[["self"]],["u8"]]],[11,"produce_dyn","","",118,[[["fnmut"],["self"],["u8"]],[["result",["error"]],["error"]]]],[11,"has_data","","",119,[[["self"]],["bool"]]],[11,"consume_raw_with","","",119,[[["self"]],[["error"],["result",["error"]]]]],[11,"deref","rubble::l2cap","",38,[[["self"]]]],[11,"deref_mut","","",38,[[["self"]]]],[11,"from","rubble::att","",2,[[["uuid16"]],["self"]]],[11,"from","","",2,[[["uuid32"]],["self"]]],[11,"from","","",2,[[["uuid"]],["self"]]],[11,"from","rubble::bytes","",13,[[["t"]],["self"]]],[11,"from","rubble::link::ad_structure","",45,[[["flags"]],["self"]]],[11,"from","rubble::link::advertising","",59,[[["u8"]],["self"]]],[11,"from","rubble::link::data","",66,[[["controlpdu"]],["self"]]],[11,"from","rubble::link::llcp","",85,[[["u8"]],["self"]]],[11,"from","","",86,[[["u8"]],["self"]]],[11,"from","rubble::security","",100,[[["u8"]],["self"]]],[11,"from","","",101,[[["u8"]],["self"]]],[11,"from","rubble::uuid","",110,[[["uuid16"]],["self"]]],[11,"fmt","rubble::att","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::bytes","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::ecdh","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::l2cap","",33,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::advertising","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",60,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble::link","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::data","",70,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",65,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",66,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble::link","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::llcp","",87,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",88,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",77,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",85,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",86,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble::link::queue","",92,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble::link","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble::phy","",98,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",99,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble::security","",120,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",121,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",103,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",100,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",101,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::time","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::uuid","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["formatter"],["self"]],["result"]]],[11,"fmt","rubble::ecdh","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::time","",107,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"sub","rubble::gatt::characteristic","Returns the set difference of the two sets of flags.",26,[[["properties"]],["properties"]]],[11,"sub","rubble::link::ad_structure","Returns the set difference of the two sets of flags.",49,[[["flags"]],["flags"]]],[11,"sub","rubble::link","Returns the set difference of the two sets of flags.",72,[[["featureset"]],["featureset"]]],[11,"sub","rubble::security","Returns the set difference of the two sets of flags.",105,[[["keydistribution"]],["keydistribution"]]],[11,"sub","rubble::time","",107,[[],["self"]]],[11,"sub","","",107,[[["self"]],["self"]]],[11,"sub","","",108,[[],["duration"]]],[11,"sub","","",108,[[["duration"]],["self"]]],[11,"eq","rubble::att","",3,[[["self"],["handle"]],["bool"]]],[11,"ne","","",3,[[["self"],["handle"]],["bool"]]],[11,"eq","","",2,[[["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["uuid16"]],["bool"]]],[11,"eq","","",2,[[["uuid"],["self"]],["bool"]]],[11,"eq","rubble","",0,[[["self"],["error"]],["bool"]]],[11,"eq","rubble::gatt::characteristic","",26,[[["self"],["properties"]],["bool"]]],[11,"ne","","",26,[[["self"],["properties"]],["bool"]]],[11,"eq","","",24,[[["self"],["appearance"]],["bool"]]],[11,"eq","rubble::l2cap","",33,[[["self"],["channel"]],["bool"]]],[11,"ne","","",33,[[["self"],["channel"]],["bool"]]],[11,"eq","rubble::link::ad_structure","",49,[[["self"],["flags"]],["bool"]]],[11,"ne","","",49,[[["self"],["flags"]],["bool"]]],[11,"eq","rubble::link::advertising","",59,[[["self"],["pdutype"]],["bool"]]],[11,"ne","","",59,[[["self"],["pdutype"]],["bool"]]],[11,"eq","rubble::link::data","",65,[[["self"],["llid"]],["bool"]]],[11,"eq","rubble::link","",40,[[["self"],["addresskind"]],["bool"]]],[11,"eq","","",71,[[["deviceaddress"],["self"]],["bool"]]],[11,"ne","","",71,[[["deviceaddress"],["self"]],["bool"]]],[11,"eq","","",72,[[["self"],["featureset"]],["bool"]]],[11,"ne","","",72,[[["self"],["featureset"]],["bool"]]],[11,"eq","rubble::link::llcp","",85,[[["self"],["controlopcode"]],["bool"]]],[11,"ne","","",85,[[["self"],["controlopcode"]],["bool"]]],[11,"eq","","",86,[[["self"],["versionnumber"]],["bool"]]],[11,"ne","","",86,[[["self"],["versionnumber"]],["bool"]]],[11,"eq","rubble::phy","",99,[[["datachannel"],["self"]],["bool"]]],[11,"ne","","",99,[[["datachannel"],["self"]],["bool"]]],[11,"eq","rubble::security","",105,[[["self"],["keydistribution"]],["bool"]]],[11,"ne","","",105,[[["self"],["keydistribution"]],["bool"]]],[11,"eq","rubble::time","",107,[[["duration"],["self"]],["bool"]]],[11,"ne","","",107,[[["duration"],["self"]],["bool"]]],[11,"eq","rubble::uuid","",109,[[["self"],["uuid16"]],["bool"]]],[11,"ne","","",109,[[["self"],["uuid16"]],["bool"]]],[11,"eq","","",110,[[["uuid32"],["self"]],["bool"]]],[11,"ne","","",110,[[["uuid32"],["self"]],["bool"]]],[11,"cmp","rubble::gatt::characteristic","",26,[[["self"],["properties"]],["ordering"]]],[11,"cmp","rubble::link::ad_structure","",49,[[["self"],["flags"]],["ordering"]]],[11,"cmp","rubble::link","",72,[[["self"],["featureset"]],["ordering"]]],[11,"cmp","rubble::security","",105,[[["self"],["keydistribution"]],["ordering"]]],[11,"cmp","rubble::time","",107,[[["duration"],["self"]],["ordering"]]],[11,"partial_cmp","rubble::gatt::characteristic","",26,[[["self"],["properties"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",26,[[["self"],["properties"]],["bool"]]],[11,"le","","",26,[[["self"],["properties"]],["bool"]]],[11,"gt","","",26,[[["self"],["properties"]],["bool"]]],[11,"ge","","",26,[[["self"],["properties"]],["bool"]]],[11,"partial_cmp","rubble::link::ad_structure","",49,[[["self"],["flags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",49,[[["self"],["flags"]],["bool"]]],[11,"le","","",49,[[["self"],["flags"]],["bool"]]],[11,"gt","","",49,[[["self"],["flags"]],["bool"]]],[11,"ge","","",49,[[["self"],["flags"]],["bool"]]],[11,"partial_cmp","rubble::link","",72,[[["self"],["featureset"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",72,[[["self"],["featureset"]],["bool"]]],[11,"le","","",72,[[["self"],["featureset"]],["bool"]]],[11,"gt","","",72,[[["self"],["featureset"]],["bool"]]],[11,"ge","","",72,[[["self"],["featureset"]],["bool"]]],[11,"partial_cmp","rubble::security","",105,[[["self"],["keydistribution"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",105,[[["self"],["keydistribution"]],["bool"]]],[11,"le","","",105,[[["self"],["keydistribution"]],["bool"]]],[11,"gt","","",105,[[["self"],["keydistribution"]],["bool"]]],[11,"ge","","",105,[[["self"],["keydistribution"]],["bool"]]],[11,"partial_cmp","rubble::time","",107,[[["duration"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",107,[[["duration"],["self"]],["bool"]]],[11,"le","","",107,[[["duration"],["self"]],["bool"]]],[11,"gt","","",107,[[["duration"],["self"]],["bool"]]],[11,"ge","","",107,[[["duration"],["self"]],["bool"]]],[11,"add","","",107,[[],["self"]]],[11,"add","","",107,[[["self"]],["self"]]],[11,"add","","",108,[[["duration"]],["self"]]],[11,"add_assign","","",107,[[["self"]]]],[11,"add_assign","","",108,[[["self"],["duration"]]]],[11,"sub_assign","rubble::gatt::characteristic","Disables all flags enabled in the set.",26,[[["self"],["properties"]]]],[11,"sub_assign","rubble::link::ad_structure","Disables all flags enabled in the set.",49,[[["self"],["flags"]]]],[11,"sub_assign","rubble::link","Disables all flags enabled in the set.",72,[[["self"],["featureset"]]]],[11,"sub_assign","rubble::security","Disables all flags enabled in the set.",105,[[["self"],["keydistribution"]]]],[11,"sub_assign","rubble::time","",107,[[["self"]]]],[11,"sub_assign","","",108,[[["self"],["duration"]]]],[11,"not","rubble::gatt::characteristic","Returns the complement of this set of flags.",26,[[],["properties"]]],[11,"not","rubble::link::ad_structure","Returns the complement of this set of flags.",49,[[],["flags"]]],[11,"not","rubble::link","Returns the complement of this set of flags.",72,[[],["featureset"]]],[11,"not","rubble::security","Returns the complement of this set of flags.",105,[[],["keydistribution"]]],[11,"bitand","rubble::gatt::characteristic","Returns the intersection between the two sets of flags.",26,[[["properties"]],["properties"]]],[11,"bitand","rubble::link::ad_structure","Returns the intersection between the two sets of flags.",49,[[["flags"]],["flags"]]],[11,"bitand","rubble::link","Returns the intersection between the two sets of flags.",72,[[["featureset"]],["featureset"]]],[11,"bitand","rubble::security","Returns the intersection between the two sets of flags.",105,[[["keydistribution"]],["keydistribution"]]],[11,"bitor","rubble::gatt::characteristic","Returns the union of the two sets of flags.",26,[[["properties"]],["properties"]]],[11,"bitor","rubble::link::ad_structure","Returns the union of the two sets of flags.",49,[[["flags"]],["flags"]]],[11,"bitor","rubble::link","Returns the union of the two sets of flags.",72,[[["featureset"]],["featureset"]]],[11,"bitor","rubble::security","Returns the union of the two sets of flags.",105,[[["keydistribution"]],["keydistribution"]]],[11,"bitxor","rubble::gatt::characteristic","Returns the left flags, but with all the right flags…",26,[[["properties"]],["properties"]]],[11,"bitxor","rubble::link::ad_structure","Returns the left flags, but with all the right flags…",49,[[["flags"]],["flags"]]],[11,"bitxor","rubble::link","Returns the left flags, but with all the right flags…",72,[[["featureset"]],["featureset"]]],[11,"bitxor","rubble::security","Returns the left flags, but with all the right flags…",105,[[["keydistribution"]],["keydistribution"]]],[11,"bitand_assign","rubble::gatt::characteristic","Disables all flags disabled in the set.",26,[[["self"],["properties"]]]],[11,"bitand_assign","rubble::link::ad_structure","Disables all flags disabled in the set.",49,[[["self"],["flags"]]]],[11,"bitand_assign","rubble::link","Disables all flags disabled in the set.",72,[[["self"],["featureset"]]]],[11,"bitand_assign","rubble::security","Disables all flags disabled in the set.",105,[[["self"],["keydistribution"]]]],[11,"bitor_assign","rubble::gatt::characteristic","Adds the set of flags.",26,[[["self"],["properties"]]]],[11,"bitor_assign","rubble::link::ad_structure","Adds the set of flags.",49,[[["self"],["flags"]]]],[11,"bitor_assign","rubble::link","Adds the set of flags.",72,[[["self"],["featureset"]]]],[11,"bitor_assign","rubble::security","Adds the set of flags.",105,[[["self"],["keydistribution"]]]],[11,"bitxor_assign","rubble::gatt::characteristic","Toggles the set of flags.",26,[[["self"],["properties"]]]],[11,"bitxor_assign","rubble::link::ad_structure","Toggles the set of flags.",49,[[["self"],["flags"]]]],[11,"bitxor_assign","rubble::link","Toggles the set of flags.",72,[[["self"],["featureset"]]]],[11,"bitxor_assign","rubble::security","Toggles the set of flags.",105,[[["self"],["keydistribution"]]]],[11,"hash","rubble::gatt::characteristic","",26,[[["self"],["__h"]]]],[11,"hash","rubble::l2cap","",33,[[["self"],["__h"]]]],[11,"hash","rubble::link::ad_structure","",49,[[["self"],["__h"]]]],[11,"hash","rubble::link","",72,[[["self"],["__h"]]]],[11,"hash","rubble::security","",105,[[["self"],["__h"]]]],[11,"next","rubble::gatt","",116,[[["self"]],[["option",["attribute"]],["attribute"]]]],[11,"extend","rubble::gatt::characteristic","",26,[[["self"],["intoiterator"]]]],[11,"extend","rubble::link::ad_structure","",49,[[["self"],["intoiterator"]]]],[11,"extend","rubble::link","",72,[[["self"],["intoiterator"]]]],[11,"extend","rubble::security","",105,[[["self"],["intoiterator"]]]],[11,"from_iter","rubble::gatt::characteristic","",26,[[["intoiterator"]],["properties"]]],[11,"from_iter","rubble::link::ad_structure","",49,[[["intoiterator"]],["flags"]]],[11,"from_iter","rubble::link","",72,[[["intoiterator"]],["featureset"]]],[11,"from_iter","rubble::security","",105,[[["intoiterator"]],["keydistribution"]]],[11,"into","rubble::att","",2,[[],["uuid"]]],[11,"into","rubble::uuid","",109,[[],["uuid"]]],[11,"into","","",110,[[],["uuid"]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::security","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::security","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::security","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::gatt::characteristic","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link::ad_structure","",49,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::link","",72,[[["self"],["formatter"]],["result"]]],[11,"fmt","rubble::security","",105,[[["self"],["formatter"]],["result"]]],[11,"clone","rubble::att","",3,[[["self"]],["handle"]]],[11,"clone","","",2,[[["self"]],["attuuid"]]],[11,"clone","rubble::bytes","",13,[[["self"]],["self"]]],[11,"clone","rubble::gatt::characteristic","",26,[[["self"]],["properties"]]],[11,"clone","","",24,[[["self"]],["appearance"]]],[11,"clone","rubble::l2cap","",33,[[["self"]],["channel"]]],[11,"clone","rubble::link::ad_structure","",45,[[["self"]],["adstructure"]]],[11,"clone","","",48,[[["self"]],["serviceuuids"]]],[11,"clone","","",49,[[["self"]],["flags"]]],[11,"clone","rubble::link::advertising","",50,[[["self"]],["pdu"]]],[11,"clone","","",60,[[["self"]],["connectrequestdata"]]],[11,"clone","","",58,[[["self"]],["sleepclockaccuracy"]]],[11,"clone","","",62,[[["self"]],["header"]]],[11,"clone","rubble::link","",63,[[["self"]],["companyid"]]],[11,"clone","rubble::link::data","",70,[[["self"]],["header"]]],[11,"clone","","",65,[[["self"]],["llid"]]],[11,"clone","rubble::link","",40,[[["self"]],["addresskind"]]],[11,"clone","","",71,[[["self"]],["deviceaddress"]]],[11,"clone","","",72,[[["self"]],["featureset"]]],[11,"clone","rubble::link::llcp","",87,[[["self"]],["connectionparamrequest"]]],[11,"clone","","",88,[[["self"]],["connectionupdatedata"]]],[11,"clone","","",77,[[["self"]],["controlpdu"]]],[11,"clone","","",85,[[["self"]],["controlopcode"]]],[11,"clone","","",86,[[["self"]],["versionnumber"]]],[11,"clone","rubble::link","",39,[[["self"]],["cmd"]]],[11,"clone","","",41,[[["self"]],["nextupdate"]]],[11,"clone","","",42,[[["self"]],["radiocmd"]]],[11,"clone","rubble::phy","",98,[[["self"]],["advertisingchannel"]]],[11,"clone","","",99,[[["self"]],["datachannel"]]],[11,"clone","rubble::security","",100,[[["self"]],["iocapabilities"]]],[11,"clone","","",104,[[["self"]],["authreq"]]],[11,"clone","","",101,[[["self"]],["bondingtype"]]],[11,"clone","","",105,[[["self"]],["keydistribution"]]],[11,"clone","rubble::time","",107,[[["self"]],["duration"]]],[11,"clone","","",108,[[["self"]],["instant"]]],[11,"clone","rubble::uuid","",109,[[["self"]],["uuid16"]]],[11,"clone","","",110,[[["self"]],["uuid32"]]],[11,"clone","","",111,[[["self"]],["uuidkind"]]],[11,"nil","","The 'nil UUID'.",122,[[],["uuid"]]],[11,"from_fields","","Creates a UUID from four field values in big-endian order.",122,[[["u16"],["u32"]],[["result",["uuid","error"]],["uuid"],["error"]]]],[11,"from_fields_le","","Creates a UUID from four field values in little-endian…",122,[[["u16"],["u32"]],[["result",["uuid","error"]],["uuid"],["error"]]]],[11,"from_u128","","Creates a UUID from a 128bit value in big-endian order.",122,[[["u128"]],["uuid"]]],[11,"from_u128_le","","Creates a UUID from a 128bit value in little-endian order.",122,[[["u128"]],["uuid"]]],[11,"from_slice","","Creates a UUID using the supplied big-endian bytes.",122,[[],[["result",["uuid","error"]],["uuid"],["error"]]]],[11,"from_bytes","","Creates a UUID using the supplied big-endian bytes.",122,[[],["uuid"]]],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with…",122,[[["str"]],[["result",["uuid","error"]],["uuid"],["error"]]]],[11,"to_hyphenated","","Get a [`Hyphenated`] formatter.",122,[[],["hyphenated"]]],[11,"to_hyphenated_ref","","Get a borrowed [`HyphenatedRef`] formatter.",122,[[["self"]],["hyphenatedref"]]],[11,"to_simple","","Get a [`Simple`] formatter.",122,[[],["simple"]]],[11,"to_simple_ref","","Get a borrowed [`SimpleRef`] formatter.",122,[[["self"]],["simpleref"]]],[11,"to_urn","","Get a [`Urn`] formatter.",122,[[],["urn"]]],[11,"to_urn_ref","","Get a borrowed [`UrnRef`] formatter.",122,[[["self"]],["urnref"]]],[18,"NAMESPACE_DNS","","UUID namespace for Domain Name System (DNS).",122,null],[18,"NAMESPACE_OID","","UUID namespace for ISO Object Identifiers (OIDs).",122,null],[18,"NAMESPACE_URL","","UUID namespace for Uniform Resource Locators (URLs).",122,null],[18,"NAMESPACE_X500","","UUID namespace for X.500 Distinguished Names (DNs).",122,null],[11,"get_variant","","Returns the variant of the UUID structure.",122,[[["self"]],[["variant"],["option",["variant"]]]]],[11,"get_version_num","","Returns the version number of the UUID.",122,[[["self"]],["usize"]]],[11,"get_version","","Returns the version of the UUID.",122,[[["self"]],[["option",["version"]],["version"]]]],[11,"as_fields","","Returns the four field values of the UUID in big-endian…",122,[[["self"]]]],[11,"to_fields_le","","Returns the four field values of the UUID in little-endian…",122,[[["self"]]]],[11,"as_u128","","Returns a 128bit value containing the UUID data.",122,[[["self"]],["u128"]]],[11,"to_u128_le","","Returns a 128bit little-endian value containing the UUID…",122,[[["self"]],["u128"]]],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",122,[[["self"]]]],[11,"is_nil","","Tests if the UUID is nil.",122,[[["self"]],["bool"]]],[11,"encode_buffer","","A buffer that can be used for `encode_...` calls, that is…",122,[[]]]],"p":[[4,"Error"],[3,"Attribute"],[4,"AttUuid"],[3,"Handle"],[3,"HandleRange"],[3,"AttributeServer"],[3,"AttributeServerTx"],[8,"AttributeProvider"],[8,"ScanCallback"],[3,"Beacon"],[3,"BeaconScanner"],[8,"ToBytes"],[8,"FromBytes"],[3,"BytesOr"],[3,"ByteWriter"],[3,"ByteReader"],[8,"Config"],[3,"PublicKey"],[3,"SharedSecret"],[3,"P256Provider"],[3,"RingProvider"],[8,"EcdhProvider"],[8,"SecretKey"],[3,"InvalidPublicKey"],[4,"Appearance"],[8,"Characteristic"],[3,"Properties"],[3,"BatteryLevel"],[3,"BatteryServiceAttrs"],[3,"MidiServiceAttrs"],[8,"ChannelMapper"],[8,"ProtocolObj"],[8,"Protocol"],[3,"Channel"],[3,"ChannelData"],[3,"BleChannelMap"],[3,"L2CAPState"],[3,"Sender"],[3,"L2CAPStateTx"],[3,"Cmd"],[4,"AddressKind"],[4,"NextUpdate"],[4,"RadioCmd"],[13,"ListenAdvertising"],[13,"ListenData"],[4,"AdStructure"],[13,"ServiceData16"],[13,"Unknown"],[3,"ServiceUuids"],[3,"Flags"],[4,"Pdu"],[13,"ConnectableUndirected"],[13,"ConnectableDirected"],[13,"NonconnectableUndirected"],[13,"ScannableUndirected"],[13,"ScanRequest"],[13,"ScanResponse"],[13,"ConnectRequest"],[4,"SleepClockAccuracy"],[4,"PduType"],[3,"ConnectRequestData"],[3,"PduBuf"],[3,"Header"],[3,"CompanyId"],[3,"Connection"],[4,"Llid"],[4,"Pdu"],[13,"DataCont"],[13,"DataStart"],[13,"Control"],[3,"Header"],[3,"DeviceAddress"],[3,"FeatureSet"],[8,"AddressFilter"],[3,"WhitelistFilter"],[3,"AdvFilter"],[3,"ScanFilter"],[4,"ControlPdu"],[13,"ChannelMapReq"],[13,"TerminateInd"],[13,"UnknownRsp"],[13,"FeatureReq"],[13,"FeatureRsp"],[13,"VersionInd"],[13,"Unknown"],[4,"ControlOpcode"],[4,"VersionNumber"],[3,"ConnectionParamRequest"],[3,"ConnectionUpdateData"],[8,"PacketQueue"],[8,"Producer"],[8,"Consumer"],[3,"Consume"],[3,"SimpleQueue"],[3,"Responder"],[8,"Transmitter"],[3,"LinkLayer"],[8,"Radio"],[3,"AdvertisingChannel"],[3,"DataChannel"],[4,"IoCapabilities"],[4,"BondingType"],[8,"SecurityLevel"],[3,"SecurityManager"],[3,"AuthReq"],[3,"KeyDistribution"],[8,"Timer"],[3,"Duration"],[3,"Instant"],[3,"Uuid16"],[3,"Uuid32"],[4,"UuidKind"],[8,"IsUuid"],[3,"NoAttributes"],[3,"P256SecretKey"],[3,"RingSecretKey"],[3,"Attributes"],[3,"AllowAll"],[3,"SimpleProducer"],[3,"SimpleConsumer"],[3,"NoSecurity"],[3,"SecureConnections"],[3,"Uuid"]]};
searchIndex["rubble_nrf5x"] = {"doc":"A Rubble BLE driver for the nRF51/nRF52-series radios.","i":[[0,"radio","rubble_nrf5x","Integrated 2.4 GHz radio with BLE support.",null,null],[3,"BleRadio","rubble_nrf5x::radio","An interface to the nRF radio in BLE mode.",null,null],[6,"PacketBuffer","","A packet buffer that can hold header and payload of any…",null,null],[11,"new","","Initializes the radio in BLE mode and takes ownership of…",0,[[["radio"],["ficr"],["packetbuffer"]],["self"]]],[11,"state","","Returns the current radio state.",0,[[["self"]],["state_r"]]],[11,"configure_receiver","","Configures the Radio for (not) receiving data according to…",0,[[["self"],["radiocmd"]]]],[11,"recv_interrupt","","Call this when the `RADIO` interrupt fires.",0,[[["self"],["instant"],["linklayer"]],[["option",["cmd"]],["cmd"]]]],[0,"timer","rubble_nrf5x","Generic `Timer` implementation that works with all 3…",null,null],[3,"BleTimer","rubble_nrf5x::timer","Implements Rubble's `Timer` trait for the timers on the…",null,null],[3,"StampSource","","A timer interface that only allows reading the current…",null,null],[8,"NrfTimerExt","","Extension trait implemented for the nRF timer peripherals.",null,null],[10,"duplicate","","",1,[[["self"]],["self"]]],[10,"init","","Initialize the timer so that it counts at a rate of 1 MHz.",1,[[["self"]]]],[10,"set_interrupt","","Configures the timer's interrupt to fire at the given…",1,[[["self"],["instant"]]]],[10,"clear_interrupt","","Disables or acknowledges this timer's interrupt.",1,[[["self"]]]],[10,"is_pending","","Returns whether a timer interrupt is currently pending.",1,[[["self"]],["bool"]]],[10,"now","","Obtains the current time as an `Instant`.",1,[[["self"]],["instant"]]],[11,"init","","Initializes the timer.",2,[[["t"]],["self"]]],[11,"configure_interrupt","","Configures the timer interrupt to fire according to `next`.",2,[[["self"],["nextupdate"]]]],[11,"is_interrupt_pending","","Checks whether this timer's interrupt is pending.",2,[[["self"]],["bool"]]],[11,"clear_interrupt","","Clears a pending interrupt and disables generation of…",2,[[["self"]]]],[11,"inner","","Provides access to the raw peripheral. Use with caution.",2,[[["self"]],["t"]]],[11,"create_stamp_source","","Creates a new `StampSource` using this timer.",2,[[["self"]],["stampsource"]]],[0,"utils","rubble_nrf5x","Useful utilities related to Rubble on the nRF52.",null,null],[5,"get_device_address","rubble_nrf5x::utils","Return the `DeviceAddress`, which is pre-programmed in the…",null,[[],["deviceaddress"]]],[11,"from","rubble_nrf5x::radio","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","rubble_nrf5x::timer","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"tx_payload_buf","rubble_nrf5x::radio","",0,[[["self"]]]],[11,"transmit_advertising","","",0,[[["self"],["advertisingchannel"],["header"]]]],[11,"transmit_data","","",0,[[["header"],["u32"],["datachannel"],["self"]]]],[11,"now","rubble_nrf5x::timer","",2,[[["self"]],["instant"]]],[11,"now","","",3,[[["self"]],["instant"]]]],"p":[[3,"BleRadio"],[8,"NrfTimerExt"],[3,"BleTimer"],[3,"StampSource"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);